// <auto-generated />
using System;
using DSAA.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Learning_Platform_of_DSAA.Migrations
{
    [DbContext(typeof(EntityDbContext))]
    partial class EntityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DSAA.EntityFrameworkCore.Entity.Compiler", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodeFormat");

                    b.Property<string>("CompilerArgs");

                    b.Property<string>("CompilerPath");

                    b.Property<string>("ExecutionFormat");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("RunnerArgs");

                    b.Property<string>("RunnerPath");

                    b.Property<bool>("isForbidden");

                    b.Property<bool>("isScript");

                    b.HasKey("Id");

                    b.ToTable("Compilers");
                });

            modelBuilder.Entity("DSAA.EntityFrameworkCore.Entity.Contest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("ContestType");

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndTime");

                    b.Property<bool>("IsHide");

                    b.Property<DateTime>("LastDate");

                    b.Property<DateTime?>("RegisterEndTime");

                    b.Property<DateTime?>("RegisterStartTime");

                    b.Property<DateTime>("StartTime");

                    b.Property<string>("SupportLanguage");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Contest");
                });

            modelBuilder.Entity("DSAA.EntityFrameworkCore.Entity.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Permission");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("DSAA.EntityFrameworkCore.Entity.Problem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Hint");

                    b.Property<string>("Input")
                        .IsRequired();

                    b.Property<bool>("IsHide");

                    b.Property<DateTime>("LastDate");

                    b.Property<int>("MemoryLimit");

                    b.Property<string>("Output")
                        .IsRequired();

                    b.Property<string>("SampleInput")
                        .IsRequired();

                    b.Property<string>("SampleOutput")
                        .IsRequired();

                    b.Property<int>("SolvedCount");

                    b.Property<int>("SubmitCount");

                    b.Property<int>("TimeLimit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Problem");
                });

            modelBuilder.Entity("DSAA.EntityFrameworkCore.Entity.Solution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CodeLength");

                    b.Property<int?>("ContestId");

                    b.Property<int>("ContestProblemID");

                    b.Property<DateTime>("JudgeTime");

                    b.Property<int?>("LanguageTypeId");

                    b.Property<int>("MemoryCost");

                    b.Property<int>("ProblemId");

                    b.Property<byte>("Result");

                    b.Property<string>("SourceCode")
                        .IsRequired()
                        .HasMaxLength(6000000);

                    b.Property<string>("SubmitIP");

                    b.Property<DateTime>("SubmitTime");

                    b.Property<int>("TimeCost");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.HasIndex("LanguageTypeId");

                    b.HasIndex("ProblemId");

                    b.HasIndex("UserId");

                    b.ToTable("Solution");
                });

            modelBuilder.Entity("DSAA.EntityFrameworkCore.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<int?>("GroupId");

                    b.Property<bool>("IsLocked");

                    b.Property<DateTime>("LastDate");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("PassWord")
                        .IsRequired();

                    b.Property<string>("Phone");

                    b.Property<double>("Rank");

                    b.Property<int>("SolvedCount");

                    b.Property<int>("SubmitCount");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Uesrs");
                });

            modelBuilder.Entity("DSAA.EntityFrameworkCore.Entity.Solution", b =>
                {
                    b.HasOne("DSAA.EntityFrameworkCore.Entity.Contest", "Contest")
                        .WithMany()
                        .HasForeignKey("ContestId");

                    b.HasOne("DSAA.EntityFrameworkCore.Entity.Compiler", "LanguageType")
                        .WithMany()
                        .HasForeignKey("LanguageTypeId");

                    b.HasOne("DSAA.EntityFrameworkCore.Entity.Problem", "Problem")
                        .WithMany()
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DSAA.EntityFrameworkCore.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DSAA.EntityFrameworkCore.Entity.User", b =>
                {
                    b.HasOne("DSAA.EntityFrameworkCore.Entity.Group", "Group")
                        .WithMany("Users")
                        .HasForeignKey("GroupId");
                });
#pragma warning restore 612, 618
        }
    }
}
